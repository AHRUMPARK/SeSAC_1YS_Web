idex.ejs

<a href="/login">로그인</a>    //서버에서 get 요청 라우터 만들어줘야 함
<a href="/register">회원가입</a>

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
최상위 index.js

app.set("view engine", "ejs");
app.use('/satatic', express.static(__dirname+'/static'));
app.use(express.urlencoded({extended:false}));
app.use(express.json());


const user = { id : "a", pw:"1" }

app.get('/',(req, res)=>{
	console.log(req.session.user); 
	if(req.session.user) res.render('index' { isLogin : true, id : req.session.user }); //즉 user란 값이 있으면 true 해라
	else res.render('index' { isLogin : false });
	res.render('index');
}
메인페이지가 user 세션값이 있다면, true 값을 보낸다.

app.get('/login',(req, res)=>{    //login.ejs 파일 만들어줘야 한다.
	res.render('login');
}

app.post('/login',(req, res)=>{  
	if(req.body.id == user.id && req.body.pw == user.pw){
		req.session.user = req.body.id 	 //*세션공간에 유저 아이디를 넣는다.
		res.send(true);
	else{
		res.send(false);
	}
}

app.get('/logout',(req, res)=>{    //login.ejs 파일 만들어줘야 한다.
	req.session.destroy(function(err){
		if(err) throw err;
		res.redirect("/"); //로그아웃 요청이 들어오면, 세션을 지우고, 메인페이지로 리다이렉트한다.
	)}
} > 로그아웃하게되면, 아무리 새로고침해도!! 로그아웃버튼이 생기지 않는다.

서버에서는 아이디랑 맞는지 확인하고 응답하면 된다.
웹브라우저에 세션이 있을 경우 ( 로그인이 되어있음을 암시 )
로그인이 되어있을때만 필요한 것들을 상황에 따라서만 보여주고 싶다.

로그인 성공 했을때 = 세션이 생기고 + "누구님"환영합니다 + 로그아웃 버튼만 있도록
즉, 페이지 랜더되는 것이 바뀌어야 한다. 
1. 로그인 검증
req.session.user 유저라는 키에 아이디값을 넣어놨다.
즉 session에 값이 있는지를 검사 하면 된다.

2. 누구님 환영합니다.
id 값을 서버에서 보내줘야 한다
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
login.ejs

<body>
<from id="form_login">
	<% if ( ! isLogin ) { %> 만약 false일 경우! 로그인, 회원가입 하이퍼링크를 보여주겠다.
		<input type="text" name="id">
		<input type="text" name="pw">
		<button type="button" onclick="login()">로그인</button>
	<% } else { %>  //트루일 경우!
		<div><%=id%>님 환영합니다.</div> //서버에서 변수값 받기
		<a href="/logout">로그아웃</a> //하이퍼링크는 get요청이다. > get요청 라우터 만들기
	<% } %>
</form>
</body>
*axios는 외부라이브러리 > cdn 가져와야 한다.
<script>
	
	function login(){
		var form = document.getElemetById("form_login");
		axios({
			method: "post",
			url : "/login",   !!get,post는 url이 따로 분리가 되기때문에 이름이 같아도 됩니다.
			data : { 
				id : form.id.value,
				pw : form.pw.value
		}).then((res) =>{
			console.log(res.data);   !!항상 데이터를 보내면, 받아야 한다 그래야 응답이있다.
			if(res.data) {
				alert('로그인 성공');
				window.location.href = "/";
			}else{
				alert('로그인 실패');
				form.reset(); //reset 메소드는 value값이 다 사라집니다.
			}
			cosonle.log(res.data);	
		})
	}

function logout(){
		
	}

node index.js 실행시키면 로컬호스트 8000 접속시 로그인 회원가입 하이퍼링크 떠있어야 한다
사용자가 어떤 흐름으로 이 페이지에 접속해서 어떤흐름으로 사용자가 서비스를 할 것이다.

서버에서는 아이디랑 맞는지 확인하고 응답하면 된다.


서비스에서는
세션에 사용자 정보 담고
그 정보를 검사 하는 것으로 로그인 기능을 구현한다.

1. 모델에가져와서 정보를 가져오든
2. 정보가 없을때 로그인페이지로 리다이렉트로 구현

